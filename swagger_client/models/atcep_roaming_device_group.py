# coding: utf-8

"""
    BloxOne Cloud EP API

    BloxOne Endpoint is a lightweight mobile agent that redirects DNS traffic from your remote devices to the BloxOne Cloud. It allows you to apply applicable security policies to your roaming end users in remote sites and branch offices.  In order for end users to connect to Infoblox cloud services, you must download and install BloxOne Endpoint on their devices. The client enforces security policies that you apply to the remote networks, regardless of where your end users are and which networks they are connected to. BloxOne Endpoint listens on port 53 of the device. If other software listens on the same port, DNS traffic cannot be redirected to BloxOne Cloud, and your device will not be protected by BloxOne Endpoint.  When you use the BloxOne Endpoint, DNS queries are sent to BloxOne Cloud directly except for (1) queries that target the bypassed domains and (2) internal domains collected through the DHCP server. If you have internal domains that are served by your local DNS servers and you want to reach them without interruptions, you should consider adding them to the bypassed internal domains list so that DNS queries for these internal domains are sent to the local DNS servers instead of BloxOne Cloud.  BloxOne Endpoint supports dual-stack IPv4 and IPv6 DNS configurations, thereby protecting all devices regardless of their network environments. BloxOne Endpoint in a dual-stack environment is able to proxy IPv6 DNS queries and forward them to BloxOne Cloud over IPv4.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AtcepRoamingDeviceGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_time': 'datetime',
        'description': 'str',
        'id': 'int',
        'internal_domain_lists': 'list[int]',
        'is_default': 'bool',
        'is_probe_enabled': 'bool',
        'name': 'str',
        'policy_id': 'int',
        'policy_name': 'str',
        'probe_domain': 'str',
        'probe_response': 'str',
        'roaming_device_count': 'int',
        'roaming_devices': 'list[str]',
        'updated_time': 'datetime'
    }

    attribute_map = {
        'created_time': 'created_time',
        'description': 'description',
        'id': 'id',
        'internal_domain_lists': 'internal_domain_lists',
        'is_default': 'is_default',
        'is_probe_enabled': 'is_probe_enabled',
        'name': 'name',
        'policy_id': 'policy_id',
        'policy_name': 'policy_name',
        'probe_domain': 'probe_domain',
        'probe_response': 'probe_response',
        'roaming_device_count': 'roaming_device_count',
        'roaming_devices': 'roaming_devices',
        'updated_time': 'updated_time'
    }

    def __init__(self, created_time=None, description=None, id=None, internal_domain_lists=None, is_default=None, is_probe_enabled=None, name=None, policy_id=None, policy_name=None, probe_domain=None, probe_response=None, roaming_device_count=None, roaming_devices=None, updated_time=None):  # noqa: E501
        """AtcepRoamingDeviceGroup - a model defined in Swagger"""  # noqa: E501

        self._created_time = None
        self._description = None
        self._id = None
        self._internal_domain_lists = None
        self._is_default = None
        self._is_probe_enabled = None
        self._name = None
        self._policy_id = None
        self._policy_name = None
        self._probe_domain = None
        self._probe_response = None
        self._roaming_device_count = None
        self._roaming_devices = None
        self._updated_time = None
        self.discriminator = None

        if created_time is not None:
            self.created_time = created_time
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if internal_domain_lists is not None:
            self.internal_domain_lists = internal_domain_lists
        if is_default is not None:
            self.is_default = is_default
        if is_probe_enabled is not None:
            self.is_probe_enabled = is_probe_enabled
        if name is not None:
            self.name = name
        if policy_id is not None:
            self.policy_id = policy_id
        if policy_name is not None:
            self.policy_name = policy_name
        if probe_domain is not None:
            self.probe_domain = probe_domain
        if probe_response is not None:
            self.probe_response = probe_response
        if roaming_device_count is not None:
            self.roaming_device_count = roaming_device_count
        if roaming_devices is not None:
            self.roaming_devices = roaming_devices
        if updated_time is not None:
            self.updated_time = updated_time

    @property
    def created_time(self):
        """Gets the created_time of this AtcepRoamingDeviceGroup.  # noqa: E501

        The time when this Roaming Device Group object was created.  # noqa: E501

        :return: The created_time of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this AtcepRoamingDeviceGroup.

        The time when this Roaming Device Group object was created.  # noqa: E501

        :param created_time: The created_time of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: datetime
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this AtcepRoamingDeviceGroup.  # noqa: E501

        The brief description for the endpoint group.  # noqa: E501

        :return: The description of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AtcepRoamingDeviceGroup.

        The brief description for the endpoint group.  # noqa: E501

        :param description: The description of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this AtcepRoamingDeviceGroup.  # noqa: E501

        The Roaming Device Group object identifier.  # noqa: E501

        :return: The id of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AtcepRoamingDeviceGroup.

        The Roaming Device Group object identifier.  # noqa: E501

        :param id: The id of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def internal_domain_lists(self):
        """Gets the internal_domain_lists of this AtcepRoamingDeviceGroup.  # noqa: E501

        The list of identifiers of internal_domain_lists ids that are associated with this endpoint group  # noqa: E501

        :return: The internal_domain_lists of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._internal_domain_lists

    @internal_domain_lists.setter
    def internal_domain_lists(self, internal_domain_lists):
        """Sets the internal_domain_lists of this AtcepRoamingDeviceGroup.

        The list of identifiers of internal_domain_lists ids that are associated with this endpoint group  # noqa: E501

        :param internal_domain_lists: The internal_domain_lists of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: list[int]
        """

        self._internal_domain_lists = internal_domain_lists

    @property
    def is_default(self):
        """Gets the is_default of this AtcepRoamingDeviceGroup.  # noqa: E501

        Flag that indicates whether this is a default endpoint group.  # noqa: E501

        :return: The is_default of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this AtcepRoamingDeviceGroup.

        Flag that indicates whether this is a default endpoint group.  # noqa: E501

        :param is_default: The is_default of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def is_probe_enabled(self):
        """Gets the is_probe_enabled of this AtcepRoamingDeviceGroup.  # noqa: E501

        Whether probe domain-response is enabled  # noqa: E501

        :return: The is_probe_enabled of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: bool
        """
        return self._is_probe_enabled

    @is_probe_enabled.setter
    def is_probe_enabled(self, is_probe_enabled):
        """Sets the is_probe_enabled of this AtcepRoamingDeviceGroup.

        Whether probe domain-response is enabled  # noqa: E501

        :param is_probe_enabled: The is_probe_enabled of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: bool
        """

        self._is_probe_enabled = is_probe_enabled

    @property
    def name(self):
        """Gets the name of this AtcepRoamingDeviceGroup.  # noqa: E501

        The name of the endpoint group.  # noqa: E501

        :return: The name of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AtcepRoamingDeviceGroup.

        The name of the endpoint group.  # noqa: E501

        :param name: The name of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def policy_id(self):
        """Gets the policy_id of this AtcepRoamingDeviceGroup.  # noqa: E501

        The identifier of the security policy with which the endpoint group is associated.  # noqa: E501

        :return: The policy_id of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: int
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this AtcepRoamingDeviceGroup.

        The identifier of the security policy with which the endpoint group is associated.  # noqa: E501

        :param policy_id: The policy_id of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: int
        """

        self._policy_id = policy_id

    @property
    def policy_name(self):
        """Gets the policy_name of this AtcepRoamingDeviceGroup.  # noqa: E501

        The name of the security policy with which the endpoint group is associated. Default is \"Default Global Policy\".  # noqa: E501

        :return: The policy_name of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this AtcepRoamingDeviceGroup.

        The name of the security policy with which the endpoint group is associated. Default is \"Default Global Policy\".  # noqa: E501

        :param policy_name: The policy_name of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: str
        """

        self._policy_name = policy_name

    @property
    def probe_domain(self):
        """Gets the probe_domain of this AtcepRoamingDeviceGroup.  # noqa: E501

        User specified domain for FQDN, excluding this field inherits from default group's probe domain (when creating) or ignores field (when updating)  # noqa: E501

        :return: The probe_domain of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: str
        """
        return self._probe_domain

    @probe_domain.setter
    def probe_domain(self, probe_domain):
        """Sets the probe_domain of this AtcepRoamingDeviceGroup.

        User specified domain for FQDN, excluding this field inherits from default group's probe domain (when creating) or ignores field (when updating)  # noqa: E501

        :param probe_domain: The probe_domain of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: str
        """

        self._probe_domain = probe_domain

    @property
    def probe_response(self):
        """Gets the probe_response of this AtcepRoamingDeviceGroup.  # noqa: E501

        The probe token for generating custom TXT record, excluding this field inherits from default group's probe response (when creating) or ignores field (when updating)  # noqa: E501

        :return: The probe_response of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: str
        """
        return self._probe_response

    @probe_response.setter
    def probe_response(self, probe_response):
        """Sets the probe_response of this AtcepRoamingDeviceGroup.

        The probe token for generating custom TXT record, excluding this field inherits from default group's probe response (when creating) or ignores field (when updating)  # noqa: E501

        :param probe_response: The probe_response of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: str
        """

        self._probe_response = probe_response

    @property
    def roaming_device_count(self):
        """Gets the roaming_device_count of this AtcepRoamingDeviceGroup.  # noqa: E501

        Count of roaming devices in this group; absence of this field is equivalent to a count of zero. Note: only GET operation on roaming device group collection resource populates this field.  # noqa: E501

        :return: The roaming_device_count of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: int
        """
        return self._roaming_device_count

    @roaming_device_count.setter
    def roaming_device_count(self, roaming_device_count):
        """Sets the roaming_device_count of this AtcepRoamingDeviceGroup.

        Count of roaming devices in this group; absence of this field is equivalent to a count of zero. Note: only GET operation on roaming device group collection resource populates this field.  # noqa: E501

        :param roaming_device_count: The roaming_device_count of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: int
        """

        self._roaming_device_count = roaming_device_count

    @property
    def roaming_devices(self):
        """Gets the roaming_devices of this AtcepRoamingDeviceGroup.  # noqa: E501

        The list of endpoint devices' client identifiers that are associated to the endpoint group.  # noqa: E501

        :return: The roaming_devices of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._roaming_devices

    @roaming_devices.setter
    def roaming_devices(self, roaming_devices):
        """Sets the roaming_devices of this AtcepRoamingDeviceGroup.

        The list of endpoint devices' client identifiers that are associated to the endpoint group.  # noqa: E501

        :param roaming_devices: The roaming_devices of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: list[str]
        """

        self._roaming_devices = roaming_devices

    @property
    def updated_time(self):
        """Gets the updated_time of this AtcepRoamingDeviceGroup.  # noqa: E501

        The time when this Roaming Device Group object was last updated.  # noqa: E501

        :return: The updated_time of this AtcepRoamingDeviceGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this AtcepRoamingDeviceGroup.

        The time when this Roaming Device Group object was last updated.  # noqa: E501

        :param updated_time: The updated_time of this AtcepRoamingDeviceGroup.  # noqa: E501
        :type: datetime
        """

        self._updated_time = updated_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AtcepRoamingDeviceGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AtcepRoamingDeviceGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
