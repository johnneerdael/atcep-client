# coding: utf-8

"""
    BloxOne Cloud EP API

    BloxOne Endpoint is a lightweight mobile agent that redirects DNS traffic from your remote devices to the BloxOne Cloud. It allows you to apply applicable security policies to your roaming end users in remote sites and branch offices.  In order for end users to connect to Infoblox cloud services, you must download and install BloxOne Endpoint on their devices. The client enforces security policies that you apply to the remote networks, regardless of where your end users are and which networks they are connected to. BloxOne Endpoint listens on port 53 of the device. If other software listens on the same port, DNS traffic cannot be redirected to BloxOne Cloud, and your device will not be protected by BloxOne Endpoint.  When you use the BloxOne Endpoint, DNS queries are sent to BloxOne Cloud directly except for (1) queries that target the bypassed domains and (2) internal domains collected through the DHCP server. If you have internal domains that are served by your local DNS servers and you want to reach them without interruptions, you should consider adding them to the bypassed internal domains list so that DNS queries for these internal domains are sent to the local DNS servers instead of BloxOne Cloud.  BloxOne Endpoint supports dual-stack IPv4 and IPv6 DNS configurations, thereby protecting all devices regardless of their network environments. BloxOne Endpoint in a dual-stack environment is able to proxy IPv6 DNS queries and forward them to BloxOne Cloud over IPv4.   # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.roaming_devices_api import RoamingDevicesApi  # noqa: E501
from swagger_client.rest import ApiException


class TestRoamingDevicesApi(unittest.TestCase):
    """RoamingDevicesApi unit test stubs"""

    def setUp(self):
        self.api = swagger_client.api.roaming_devices_api.RoamingDevicesApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_roaming_devices_list_roaming_devices(self):
        """Test case for roaming_devices_list_roaming_devices

        List Roaming Devices.  # noqa: E501
        """
        pass

    def test_roaming_devices_list_roaming_devices_csv(self):
        """Test case for roaming_devices_list_roaming_devices_csv

        List RoamingDevices in CSV format Use this method to download the selected list of roaming devices in CSV (comma-separate values) format.  # noqa: E501
        """
        pass

    def test_roaming_devices_read_roaming_device(self):
        """Test case for roaming_devices_read_roaming_device

        Read Roaming Device.  # noqa: E501
        """
        pass

    def test_roaming_devices_update_roaming_device(self):
        """Test case for roaming_devices_update_roaming_device

        Update Roaming Device.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
